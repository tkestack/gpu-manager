// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/api/runtime/vcuda/api.proto

/*
Package vcuda is a generated protocol buffer package.

It is generated from these files:
	pkg/api/runtime/vcuda/api.proto

It has these top-level messages:
	VDeviceRequest
	VDeviceResponse
*/
package vcuda

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VDeviceRequest struct {
	BusId         string `protobuf:"bytes,1,opt,name=bus_id,json=busId" json:"bus_id,omitempty"`
	PodUid        string `protobuf:"bytes,2,opt,name=pod_uid,json=podUid" json:"pod_uid,omitempty"`
	ContainerName string `protobuf:"bytes,3,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	ContainerId   string `protobuf:"bytes,4,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *VDeviceRequest) Reset()                    { *m = VDeviceRequest{} }
func (m *VDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*VDeviceRequest) ProtoMessage()               {}
func (*VDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VDeviceRequest) GetBusId() string {
	if m != nil {
		return m.BusId
	}
	return ""
}

func (m *VDeviceRequest) GetPodUid() string {
	if m != nil {
		return m.PodUid
	}
	return ""
}

func (m *VDeviceRequest) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *VDeviceRequest) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type VDeviceResponse struct {
}

func (m *VDeviceResponse) Reset()                    { *m = VDeviceResponse{} }
func (m *VDeviceResponse) String() string            { return proto.CompactTextString(m) }
func (*VDeviceResponse) ProtoMessage()               {}
func (*VDeviceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*VDeviceRequest)(nil), "vcuda.VDeviceRequest")
	proto.RegisterType((*VDeviceResponse)(nil), "vcuda.VDeviceResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for VCUDAService service

type VCUDAServiceClient interface {
	RegisterVDevice(ctx context.Context, in *VDeviceRequest, opts ...grpc.CallOption) (*VDeviceResponse, error)
}

type vCUDAServiceClient struct {
	cc *grpc.ClientConn
}

func NewVCUDAServiceClient(cc *grpc.ClientConn) VCUDAServiceClient {
	return &vCUDAServiceClient{cc}
}

func (c *vCUDAServiceClient) RegisterVDevice(ctx context.Context, in *VDeviceRequest, opts ...grpc.CallOption) (*VDeviceResponse, error) {
	out := new(VDeviceResponse)
	err := grpc.Invoke(ctx, "/vcuda.VCUDAService/RegisterVDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VCUDAService service

type VCUDAServiceServer interface {
	RegisterVDevice(context.Context, *VDeviceRequest) (*VDeviceResponse, error)
}

func RegisterVCUDAServiceServer(s *grpc.Server, srv VCUDAServiceServer) {
	s.RegisterService(&_VCUDAService_serviceDesc, srv)
}

func _VCUDAService_RegisterVDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCUDAServiceServer).RegisterVDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vcuda.VCUDAService/RegisterVDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCUDAServiceServer).RegisterVDevice(ctx, req.(*VDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VCUDAService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vcuda.VCUDAService",
	HandlerType: (*VCUDAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterVDevice",
			Handler:    _VCUDAService_RegisterVDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/api/runtime/vcuda/api.proto",
}

func init() { proto.RegisterFile("pkg/api/runtime/vcuda/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 226 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x5c, 0xd0, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0x06, 0x70, 0xa3, 0x36, 0xe2, 0x58, 0x5b, 0x5c, 0xa8, 0x06, 0x2f, 0x6a, 0x40, 0xf0, 0x94,
	0x80, 0x3e, 0x81, 0xda, 0x4b, 0x2f, 0x1e, 0x56, 0xda, 0x6b, 0xd8, 0x64, 0x86, 0x32, 0x48, 0x76,
	0xd7, 0xfd, 0xd3, 0x87, 0xf0, 0xa9, 0x25, 0xab, 0x44, 0xec, 0xf5, 0x37, 0x1f, 0xc3, 0x7c, 0x03,
	0x37, 0xf6, 0x63, 0x5b, 0x2b, 0xcb, 0xb5, 0x8b, 0x3a, 0x70, 0x4f, 0xf5, 0xae, 0x8b, 0xa8, 0x06,
	0xa9, 0xac, 0x33, 0xc1, 0x88, 0x49, 0x82, 0xf2, 0x2b, 0x83, 0xd9, 0x66, 0x49, 0x3b, 0xee, 0x48,
	0xd2, 0x67, 0x24, 0x1f, 0xc4, 0x02, 0xf2, 0x36, 0xfa, 0x86, 0xb1, 0xc8, 0x6e, 0xb3, 0x87, 0x53,
	0x39, 0x69, 0xa3, 0x5f, 0xa1, 0xb8, 0x82, 0x13, 0x6b, 0xb0, 0x89, 0x8c, 0xc5, 0x61, 0xf2, 0xdc,
	0x1a, 0x5c, 0x33, 0x8a, 0x7b, 0x98, 0x75, 0x46, 0x07, 0xc5, 0x9a, 0x5c, 0xa3, 0x55, 0x4f, 0xc5,
	0x51, 0x9a, 0x9f, 0x8f, 0xfa, 0xa6, 0x7a, 0x12, 0x77, 0x30, 0xfd, 0x8b, 0x31, 0x16, 0xc7, 0x29,
	0x74, 0x36, 0xda, 0x0a, 0xcb, 0x0b, 0x98, 0x8f, 0xb7, 0x78, 0x6b, 0xb4, 0xa7, 0x47, 0x09, 0xd3,
	0xcd, 0xeb, 0x7a, 0xf9, 0xfc, 0x4e, 0x6e, 0x70, 0xf1, 0x02, 0x73, 0x49, 0x5b, 0xf6, 0x81, 0xdc,
	0x6f, 0x54, 0x2c, 0xaa, 0x54, 0xa5, 0xfa, 0x5f, 0xe3, 0xfa, 0x72, 0x9f, 0x7f, 0x36, 0x96, 0x07,
	0x6d, 0x9e, 0x3e, 0xf0, 0xf4, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xa0, 0x48, 0xf8, 0x24, 0x01,
	0x00, 0x00,
}
